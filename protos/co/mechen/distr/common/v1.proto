syntax = "proto3";

package co.mechen.distr.common.v1;

message Value {
    oneof value {
        string string_value = 1;
        double number_value = 2;
        bool bool_value = 3;
        Struct struct_value = 4;
    };
}

message Struct {
    map<string, Value> fields = 1;
}

message Field {
    string name = 1;
    optional string description = 2;
    optional Value default_value = 3;
    bool required = 4;
    enum Type {
        STRING = 0;
        NUMBER = 1;
        BOOLEAN = 2;
        STRUCT = 3;
    }
    Type type = 5;
    map<string, Field> fields = 6;
}

message Input {
    string name = 1;
    Value value = 2;
}

message Property {
    string name = 1;
    Value value = 2;
}

enum Method {
    GET = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
}

message ReflectMethodRequest {
    Method method = 1;
}

message ReflectMethodResponse {
    Method method = 1;
    repeated Field inputs = 2;
    repeated Field outputs = 3;
}

// API Credentials
message AWSCredentials {
    string id = 1;
    string secret = 2;
    string region = 3;
}

message AzureCredentials {
    string tenant_id = 1;
    string client_id = 2;
    string secret = 3;
}

message OtherCredentials {
    map<string, string> values = 1;
}

message Credentials {
    optional AWSCredentials aws = 1;
    optional AzureCredentials azure = 2;
    optional OtherCredentials other = 3;
}

// METHODS
// Get
message GetRequest {
    Credentials credentials = 1;
    string resource_id = 2;
}

message GetResponse {
    repeated Property properties = 2;
}

// Status
message StatusRequest {
    Credentials credentials = 1;
    string resource_id = 2;
}

enum Status {
    HEALTHY = 0;
    DEGRADED = 1;
    DOWN = 2;
}

message StatusResponse {
    Status status = 1;
}

// Usage
message UsageRequest {
    Credentials credentials = 1;
    string resource_id = 2;
}

enum UsageType {
    LIMITED = 0;
    UNLIMITED = 1;
}

message UsageResponse {
    UsageType type = 1;
    optional double current = 2;
    optional double limit = 3;
}

// Create
message CreateRequest {
    Credentials credentials = 1;
    string resource_id = 2;
    repeated Input payload = 3;
}

message CreateResponse {
    bool status = 1;
    repeated Property properties = 2;
}

// Update
message UpdateRequest {
    Credentials credentials = 1;
    string resource_id = 2;
    repeated Input payload = 3;
}

message UpdateResponse {
    bool status = 1;
    repeated Property properties = 2;
}

// Delete
message DeleteRequest {
    Credentials credentials = 1;
    string resource_id = 2;
    repeated Input payload = 3;
}

message DeleteResponse {
    bool status = 1;
}